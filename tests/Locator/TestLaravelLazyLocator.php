<?php

namespace Joselfonseca\LaravelTactician\Tests\Locator;

use Illuminate\Support\Facades\Config;
use Joselfonseca\LaravelTactician\Locator\LaravelLazyLocator;
use Joselfonseca\LaravelTactician\Locator\LaravelLocator;
use Joselfonseca\LaravelTactician\Tests\TestCase;

/**
 * Class TestLaravelLocator
 * @package Joselfonseca\LaravelTactician\Tests\Locator
 */
class TestLaravelLazyLocator extends TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Config::set('laravel-tactician.locator', LaravelLazyLocator::class);
    }

    public function tearDown(): void
    {
        Config::set('laravel-tactician.locator', LaravelLocator::class);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * It resolves the locator
     */
    public function test_it_resolves_the_laravel_lazy_locator()
    {
        $this->assertInstanceOf('Joselfonseca\LaravelTactician\Locator\LocatorInterface',
            app(LaravelLazyLocator::class));
    }

    /**
     * Throws exception if no handler for a command has been added
     */
    public function test_it_throws_exception_when_locator_from_laravel_container_is_not_found()
    {
        $this->expectException(\League\Tactician\Exception\MissingHandlerException::class);
        $locator = app(LaravelLazyLocator::class);
        $handler = $locator->getHandlerForCommand('TestCommand');
    }

    /**
     * It is able to resolve the locator from the container
     */
    public function test_it_is_able_to_resolve_handler_from_laravel_container()
    {
        $locator = app(LaravelLazyLocator::class);
        $locator->addHandler('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandHandler',
            'Joselfonseca\LaravelTactician\Tests\Stubs\TestCommand');
        $handler = $locator->getHandlerForCommand('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommand');
        $this->assertInstanceOf('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandHandler', $handler);
    }

    /**
     * Add more than one command => handler to the bus
     */
    public function test_it_maps_array_commands()
    {
        $locator = app(LaravelLazyLocator::class);
        $locator->addHandlers([
            'Joselfonseca\LaravelTactician\Tests\Stubs\TestCommand' => 'Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandHandler',
            'Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandInput' => 'Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandSeccondHandler'
        ]);
        $handler = $locator->getHandlerForCommand('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommand');
        $handler2 = $locator->getHandlerForCommand('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandInput');
        $this->assertInstanceOf('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandHandler', $handler);
        $this->assertInstanceOf('Joselfonseca\LaravelTactician\Tests\Stubs\TestCommandSeccondHandler', $handler2);
    }
}